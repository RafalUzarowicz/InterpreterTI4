#(* Main program parts. *)
module grammar;

program : functionDefinition  {functionDefinition};

functionDefinition : type  identifier  "("  parameters  ")" block;

parameters : [type  identifier {","  type  identifier}];

block : "{"  statement  {statement}  "}";

statement : conditional | loop | functionCall | varDeclaration | arrayDeclaration | assign | print | break | return | continue |  block | boardChange | 'Îµ';

#(* Changes to game state. *)
boardChange : whichPlayer  (playerUnits | playerStateChange)  ";";

playerStateChange : ("activate" | "deactivate")  whichHex;
playerUnits : moveUnits | addUnits | removeUnits;
moveUnits : "move"  unitsBrackets  fromWhere  toWhere;
addUnits : "add"  unitsBrackets  toWhere;
removeUnits : "remove"  unitsBrackets  fromWhere;

fromWhere : "from"  hexOrPlanet;
toWhere : "to"  hexOrPlanet;

hexOrPlanet : "("  (hex|planet)  ")";
unitsBrackets : "("  unitsList  ")";
unitsList : (unitAmount  {","  unitAmount}) | identifier;
unitAmount : value  ":"  value;

#(* Checking game state. *)
boardStateCheck : playerStateCheck | planetOrHexStateCheck | hexActivationCheck;

hexActivationCheck : whichPlayer  "activated"  whichHex;

planetOrHexStateCheck : (whichPlanet|whichHex)  "has"  "("  value  ")";

playerStateCheck : whichPlayer  "has"  playerUnitsCheck;
playerUnitsCheck : "("  value  ")"  "at"  hexOrPlanet;

whichPlayer : "player"  "("  value  ")";
whichPlanet : "planet"  "("  value  ")";
whichHex : "hex"  "("  value  ")";

#(* Specific values for unit, hex and planet. *)
unit : ships | ground | structures;
ships : "Fighter" | "Destroyer" | "Carrier" | "Cruiser" | "Dreadnought" | "WarSun" | "Flagship";
ground : "Infantry";
structures : "SpaceDock" | "PDS";

color : "Red" | "Yellow" | "Green" | "Blue" | "Purple" | "Black" | "NoColor";

hex : "h"  "0'-'50";
planet : "p"  "0'-'58";

#(* Basic statements. *)
conditional : "if"  "("  conditionExpression  ")"  block  ["else"  block];
loop : "foreach"  "("  typeOrVar  identifier  ":"  identifier  ")"  block;

varDeclaration : typeOrVar  identifier  "="  conditionExpression ";";
arrayDeclaration : typeOrVar  "["  "]"  identifier  "="  type  "["  [nonZeroNumber]  "]" ["{"  [value  {{","  value}}]  "}" ]  ";";
typeOrVar : type | "var";
assign : identifier ["[" number "]"]  "="  conditionExpression  ";";
functionCall : identifier  "("  arguments  ")"  ";";
arguments : [conditionExpression  {","  conditionExpression}];
print : "print"  "("  conditionExpression  {","  conditionExpression}  ")"  ";";
break : "break"  ";";
continue : "continue"  ";";
return : "return"  [conditionExpression]  ";";

#(* Operators' order. *)
conditionExpression : andCondition  { or  andCondition };
andCondition : relationCondition  { and  relationCondition };
relationCondition : condition  { relation  condition };
condition : [not] addExpression;

addExpression : multiplyExpression  { add  multiplyExpression };
multiplyExpression : expression  { multiply  expression};
expression : [negative]( value | "("  conditionExpression  ")");

#(* Basic operators. *)
or : "||";
and : "&&";
relation : ">" | "<" | "<=" | ">=" | "==" | "!=";
not : "!";

negative : "-";
add : "+" | "-";
multiply : "*" | "/";

#(* Variables and literals. *)
value : literal | functionCall | (identifier  ["["  number  "]"]) | boardStateCheck;
type : "int"|"string"|"bool"|"unit"|"color"|"hex"|"planet";
identifier : ((underscore  (letter | digit | underscore)) |letter)  {letter | digit | underscore};

literal : number | string | bool | unit | color | hex | planet;

number : nonZeroNumber | "0";
nonZeroNumber : nonZeroDigit  {digit};
string : "\""  {character}  "\"";
bool : "true" | "false";

character : letter | digit | special;
letter : 'a'-'z' | 'A'-'Z';
digit : "0" | nonZeroDigit;
special : underscore | "." | "," | "-" | " " | "/" | "\\";
nonZeroDigit : '1'-'9';
underscore : '_';